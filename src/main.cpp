#include <main.hpp>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH , SCREEN_HEIGHT , &Wire , -1);
static const uint8_t image_data_Saraarray [1024] = {
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,0x00,0xF8,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x1E,0x00},
{0x00,0x00,0xF0,0x03,0x00,0x83,0x20,0x00,0x00,0x00,0x1C,0x02,0x80,0x81,0x31,0x00},
{0x00,0x00,0x07,0x02,0xC0,0x00,0x19,0x00,0x00,0x80,0x01,0x03,0x60,0x00,0x0F,0x00},
{0x00,0xE0,0x00,0x01,0x30,0x00,0x00,0x00,0x00,0xB0,0x81,0x01,0x18,0x00,0x00,0x00},
{0x00,0x18,0x81,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0xC1,0x00,0x00,0x00,0x00,0x00},
{0x00,0x03,0x63,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x3E,0x00,0x00,0x00,0x00,0x00},
{0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x18,0x00,0x00,0x00,0x00,0x00,0xF8,0x01,0x08,0x00,0x00,0x00,0x00,0x00,0x0C,0x03},
{0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x02,0x00,0x00,0x00,0x00,0x3F,0x80,0x03,0x06},
{0x00,0x00,0x00,0xC0,0x21,0xC0,0x06,0x04,0x00,0x00,0x00,0x78,0x30,0x60,0x0C,0x0C},
{0x00,0x00,0x00,0x18,0x18,0x30,0xF8,0x0F,0x00,0x00,0x00,0x0E,0x0E,0x0C,0x00,0x00},
{0x00,0x00,0x00,0xFB,0x03,0x06,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x02,0x00,0x00},
{0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,0x00},
{0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x80,0x0F,0x00,0x00},
{0x00,0x30,0x00,0x00,0xF0,0x08,0x00,0x00,0x00,0x1C,0x00,0x00,0x1C,0x0C,0x00,0x00},
{0x00,0x04,0x00,0x00,0x06,0x06,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x03,0x00,0x00},
{0x00,0x00,0x00,0xC0,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x60,0xC0,0x00,0x00,0x00},
{0x00,0x00,0x00,0xD8,0x30,0x00,0xF0,0x07,0x00,0x00,0x00,0x8C,0x18,0x00,0x18,0x0C},
{0x00,0x00,0x00,0x86,0x0F,0x00,0x2C,0x18,0x00,0x00,0x00,0x03,0x00,0x00,0x27,0x10},
{0x00,0x00,0x80,0x01,0x00,0x00,0x21,0x10,0x00,0x00,0xC0,0x00,0x00,0x80,0x40,0x18},
{0x00,0x00,0x60,0x00,0x00,0x80,0xC0,0x0F,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00},
{0x00,0x80,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0xF8,0x00,0x00},
{0x00,0x60,0x00,0x00,0x00,0x8F,0x01,0x00,0x00,0x30,0x00,0x00,0xC0,0xC1,0x00,0x00},
{0x00,0x18,0x00,0x00,0x60,0x60,0x00,0x00,0x00,0x0C,0x00,0x00,0x18,0x38,0x00,0x00},
{0x00,0x04,0x00,0x00,0x0E,0x0C,0x00,0x0F,0x00,0x00,0x00,0x00,0x07,0x06,0xC0,0x19},
{0x00,0x00,0x00,0xC0,0x8C,0x03,0x70,0x10,0x00,0x00,0x00,0x70,0xF8,0x00,0x58,0x10},
{0x00,0x00,0x00,0x18,0x00,0x00,0xCE,0x18,0x00,0x00,0x00,0x0C,0x00,0x00,0x82,0x0C},
{0x00,0x00,0x00,0x02,0x00,0x00,0x83,0x07,0x00,0x00,0x80,0x01,0x00,0x80,0x01,0x00},
{0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x70,0x00,0x00},
{0x00,0x80,0x01,0x00,0x00,0x5F,0x00,0x00,0x00,0x80,0x00,0x00,0xE0,0x41,0x00,0x00},
{0x00,0xC0,0x00,0x00,0x38,0x60,0x00,0x78,0x00,0x60,0x00,0x00,0x0E,0x38,0x00,0xCE},
{0x00,0x30,0x00,0x80,0x07,0x0C,0x80,0x83,0x00,0x10,0x00,0xE0,0x04,0x06,0xC0,0x02},
{0x00,0x00,0x00,0x30,0x84,0x01,0x60,0x02,0x00,0x00,0x00,0x0C,0xC4,0x00,0x30,0x86},
{0x00,0x00,0x00,0x07,0x78,0x00,0x18,0x84,0x00,0x00,0xC0,0x01,0x00,0xE0,0x0D,0xCC},
{0x00,0x00,0x60,0x00,0x00,0x38,0x01,0x78,0x00,0x00,0x38,0x00,0x00,0x0E,0x01,0x00},
{0x00,0x00,0x0C,0x80,0x83,0x83,0x01,0x00,0x00,0x00,0x07,0x80,0xC0,0x80,0x00,0x00},
{0x00,0x80,0x01,0x80,0x60,0xC0,0x00,0x00,0x00,0xE0,0x00,0x80,0x31,0x60,0x00,0x00},
{0x00,0x00,0x00,0x00,0x0D,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x18,0x00,0x00},
{0x00,0x00,0x00,0x00,0x07,0x0E,0x00,0x00,0x00,0x00,0x00,0x80,0x0D,0x03,0x00,0x00},
{0x00,0x00,0x00,0xC0,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x0C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x01,0x00,0x00,0x00,0x00},
{0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x20,0x00,0x1F,0x00},
{0x00,0x00,0x06,0x00,0x20,0xC0,0x11,0x00,0x00,0x00,0x03,0x00,0x60,0x38,0x08,0x00},
{0x00,0x80,0x01,0x00,0x40,0x0E,0x0E,0x00,0x00,0xC0,0x00,0x00,0xC0,0x01,0x03,0x00},
{0x00,0x30,0x00,0x00,0xE0,0x80,0x01,0x00,0x00,0x08,0x00,0x00,0x9C,0xC0,0x00,0x00},
{0x00,0x00,0x00,0x00,0x87,0x30,0x00,0x00,0x00,0x00,0x00,0xE0,0x81,0x1D,0x00,0x00},
{0x00,0x00,0x00,0x38,0x00,0x07,0x00,0x00,0x00,0x00,0x00,0x0E,0x00,0x00,0x00,0x00},
{0x00,0x00,0xC0,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x01,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
}
Logger logger;
Scheduler sc;
// 创建一个连接WiFi任务
Task tConnect(&connectWiFiTask , &sc);
// 创建一个时间校准任务
Task tInitTimeClient(TASK_IMMEDIATE , TASK_ONCE , &timeClientInit , &sc);
// 创建一个时间更新任务
Task tUpdateTime(TASK_SECOND , TASK_FOREVER , &timeUpdate , &sc);
// 创建一个web Server任务
Task tCreateWebServer(TASK_IMMEDIATE , TASK_ONCE , &createWebServer , &sc);
WiFiConnectWork* wiFiConnectWork = NULL;
TimeClientWork* timeClientWork = NULL;
WebServerWork* webServerWork = NULL;
FileSystemInitWork* fileSystemInitWork = NULL;
// 初始化函数
void setup() {
    Serial.begin(9600);
    Serial.println();
    Serial.flush();
    // 初始化任务
    // 初始化显示屏
    if (!display.begin(SSD1306_SWITCHCAPVCC , 0x3C)) {
        Serial.println("SSD1306 allocation failed");
        for (;;); // Loop forever if initialization failed
    }
    display.clearDisplay();
    display.display();
    // 显示图像
    display.drawBitmap(0 , 0 , image_data_Saraarray , SCREEN_WIDTH , SCREEN_HEIGHT , WHITE);
    display.display();
    
    //启动变量初始化
    initAll();
    //变量初始化任务完成后，启动WiFi连接任务
    tConnect.enable();
    // 时间初始化任务
    tInitTimeClient.enable();
    //时间更新任务
    tUpdateTime.enable();
    //启动创建webserver任务
    tCreateWebServer.enable();
}
// 时间更新任务
void timeUpdate() {
    if (timeClientWork) {
        timeClientWork->onLoop();
    }
}
// 时间初始化任务
void timeClientInit() {
    timeClientWork->initWork(
        {
            .init = [] (std::string name) {
                logger.Println(name,"开始执行时间校准任务");
            },
            .finished = [] (std::string name) {
                logger.Println(name,"时间校准任务完成");
            }
        }
    );
}
void initAll() {
    logger = Logger();
    logger.Println("Main" , "开始初始化所有全局变量");
    wiFiConnectWork = new WiFiConnectWork("CIA-2.4G" , "204fastest");
    timeClientWork = new TimeClientWork();
    webServerWork = new WebServerWork();
    fileSystemInitWork = new FileSystemInitWork();
    fileSystemInitWork->initWork(
        {
            .init = [] (std::string name) {
                    logger.Println(name,"初始化");
            },
            .finished = [] (std::string name) {
                logger.Println(name,"初始化完成");
            },
        }
    );
}
//创建webServer任务
void createWebServer() {
    webServerWork->initWork(
        {
            .init = [] (std::string name) {
                logger.Println(name,"开始执行创建webServer任务");
            },
            .running = [] (std::string name) {
                logger.Println(name,"调用");
            },
            .finished = [] (std::string name) {
                logger.Println(name,"初始化WebServer完成");
            },
            .error = [] (std::string name,std::string reason) {
                logger.Println(name,reason);
            },
        }
    );
}
// 连接WiFi任务
void connectWiFiTask() {
    logger.Println("Main" , "执行连接WiFi任务");
    wiFiConnectWork->initWork({ .finished = [] (std::string name) {
        logger.Println(name , "任务结束");
        Serial.print("IP地址: ");
        Serial.println(WiFi.localIP());
        tConnect.getInternalStatusRequest()->signalComplete();
        tConnect.disable();
        } });
}

// 循环函数
void loop() { sc.execute(); }
